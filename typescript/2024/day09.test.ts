import * as assert from "node:assert";
import { describe, it } from "node:test";
import { Day09 } from "../2024";

describe("Day 9", () => {
  const day = new Day09();

  describe("when expanding input", () => {
    [
      {
        input: "12345",
        expected: [
          0,
          null,
          null,
          1,
          1,
          1,
          null,
          null,
          null,
          null,
          2,
          2,
          2,
          2,
          2,
        ],
      },
      {
        input: "2333133121414131402",
        expected: [
          0,
          0,
          null,
          null,
          null,
          1,
          1,
          1,
          null,
          null,
          null,
          2,
          null,
          null,
          null,
          3,
          3,
          3,
          null,
          4,
          4,
          null,
          5,
          5,
          5,
          5,
          null,
          6,
          6,
          6,
          6,
          null,
          7,
          7,
          7,
          null,
          8,
          8,
          8,
          8,
          9,
          9,
        ],
      },
      {
        input: "123456789",
        expected: [
          0,
          null,
          null,
          1,
          1,
          1,
          null,
          null,
          null,
          null,
          2,
          2,
          2,
          2,
          2,
          null,
          null,
          null,
          null,
          null,
          null,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
        ],
      },
      {
        input: "90909",
        expected: [
          0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
          2, 2, 2, 2,
        ],
      },
      {
        input: "101010101010101010101",
        expected: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
      },
    ].forEach(({ input, expected }) => {
      it(`should correctly expand ${input}`, () => {
        assert.deepStrictEqual(day.expandInput(input), expected);
      });
    });
  });

  describe("when moving blocks", () => {
    [
      {
        input: [0, null, null, 1, 1, 1, null, null, null, null, 2, 2, 2, 2, 2],
        expected: [0, 2, 2, 1, 1, 1, 2, 2, 2],
      },
      {
        input: [
          0,
          0,
          null,
          null,
          null,
          1,
          1,
          1,
          null,
          null,
          null,
          2,
          null,
          null,
          null,
          3,
          3,
          3,
          null,
          4,
          4,
          null,
          5,
          5,
          5,
          5,
          null,
          6,
          6,
          6,
          6,
          null,
          7,
          7,
          7,
          null,
          8,
          8,
          8,
          8,
          9,
          9,
        ],
        expected: [
          0, 0, 9, 9, 8, 1, 1, 1, 8, 8, 8, 2, 7, 7, 7, 3, 3, 3, 6, 4, 4, 6, 5,
          5, 5, 5, 6, 6,
        ],
      },
      {
        input: [
          0,
          null,
          null,
          1,
          1,
          1,
          null,
          null,
          null,
          null,
          2,
          2,
          2,
          2,
          2,
          null,
          null,
          null,
          null,
          null,
          null,
          3,
          3,
          3,
          3,
          3,
          3,
          3,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          null,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
          4,
        ],
        expected: [
          0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 3, 3, 3, 3, 3,
          3, 3,
        ],
      },
    ].forEach(({ input, expected }) => {
      it(`should correctly move blocks for ${input}`, () => {
        assert.deepStrictEqual(day.moveBlocks(input), expected);
      });
    });
  });

  describe("when moving contiguous blocks", () => {
    [
      {
        input: [0, null, null, 1, 1, 1, null, null, null, null, 2, 2, 2, 2, 2],
        expected: [
          0,
          null,
          null,
          1,
          1,
          1,
          null,
          null,
          null,
          null,
          2,
          2,
          2,
          2,
          2,
        ],
      },
      {
        input: [
          0,
          0,
          null,
          null,
          null,
          1,
          1,
          1,
          null,
          null,
          null,
          2,
          null,
          null,
          null,
          3,
          3,
          3,
          null,
          4,
          4,
          null,
          5,
          5,
          5,
          5,
          null,
          6,
          6,
          6,
          6,
          null,
          7,
          7,
          7,
          null,
          8,
          8,
          8,
          8,
          9,
          9,
        ],
        expected: [
          0,
          0,
          9,
          9,
          2,
          1,
          1,
          1,
          7,
          7,
          7,
          null,
          4,
          4,
          null,
          3,
          3,
          3,
          null,
          null,
          null,
          null,
          5,
          5,
          5,
          5,
          null,
          6,
          6,
          6,
          6,
          null,
          null,
          null,
          null,
          null,
          8,
          8,
          8,
          8,
        ],
      },
    ].forEach(({ input, expected }) => {
      it(`should correctly move blocks for ${input}`, () => {
        assert.deepStrictEqual(day.moveContiguousBlocks(input), expected);
      });
    });
  });

  describe("when calculating checksum", () => {
    [
      { input: [0, 2, 2, 1, 1, 1, 2, 2, 2], expected: 60 },
      {
        input: [
          0, 0, 9, 9, 8, 1, 1, 1, 8, 8, 8, 2, 7, 7, 7, 3, 3, 3, 6, 4, 4, 6, 5,
          5, 5, 5, 6, 6,
        ],
        expected: 1928,
      },
      {
        input: [
          0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 2, 2, 2, 2, 2, 4, 4, 4, 3, 3, 3, 3, 3,
          3, 3,
        ],
        expected: 897,
      },
    ].forEach(({ input, expected }) => {
      it(`should return ${expected} for ${input}`, () => {
        assert.deepStrictEqual(day.calculateChecksum(input), expected);
      });
    });
  });
});
